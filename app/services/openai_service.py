import httpx
from fastapi import HTTPException, Depends
from fastapi.responses import JSONResponse
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from app.core import settings
from app.database import get_db
from app.models import Promt



async def analyze_reviews(
    reviewsBlock: list[str],
    promt_id: int | None = None,
    db: AsyncSession = Depends(get_db)
) -> str:    
    if 1==1:
        return "OOOOOOOOOOOOOOOOOOOOOOOOO."

    if not settings.OPENAI_API_KEY:
        return "–ò–ò-–∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞."

    titlePromt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–∑—ã–≤—ã"
    if promt_id:
        promt = db.query(Promt).filter(Promt.id == promt_id).first()
        if promt and promt.description:
            titlePromt = f"{promt.description.strip()}"

    headers = {
        "Authorization": f"Bearer {settings.OPENAI_API_KEY}",
        "Content-Type": "application/json",
    }

    userReviews = "–û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"
    promtRreviews = f"{titlePromt}\n{userReviews}\n{reviewsBlock}"

    payload = {
        "model": settings.OPENAI_MODEL,
        "messages": [{"role": "user", "content": f"{promtRreviews}"}],
        "temperature": 0.7,
    }

    try:
        async with httpx.AsyncClient(timeout=30) as client:
            response = await client.post(f"{settings.OPENAI_API_BASE}/chat/completions", headers=headers, json=payload)

            if response.status_code != 200:
                error_text = await response.aread()  # —á–∏—Ç–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç OpenAI: {response.status_code} {error_text.decode()}")
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò-—Å–µ—Ä–≤–∏—Å—É.")

            data = response.json()
            return data["choices"][0]["message"]["content"]

    except httpx.HTTPStatusError as e:
        print(f"üö® HTTP –æ—à–∏–±–∫–∞: {e.response.status_code} {await e.response.aread()}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò-—Å–µ—Ä–≤–∏—Å—É.")
    except Exception as e:
        print(f"‚ö° –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ò–ò: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



def fake_analysis(reviews: list[str]) -> str:
    """–§—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑ OpenAI."""
    positives = sum(1 for r in reviews if "—Ö–æ—Ä–æ—à" in r.lower() or "–æ—Ç–ª–∏—á–Ω" in r.lower())
    negatives = sum(1 for r in reviews if "–ø–ª–æ—Ö" in r.lower() or "—É–∂–∞—Å–Ω" in r.lower())
    total = len(reviews)
    print(f"–§—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞")
    return (f"–ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ (–∑–∞–≥–ª—É—à–∫–∞):\n"
            f"–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total}\n"
            f"–ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö: {positives}\n"
            f"–ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö: {negatives}\n"
            f"–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö: {total - positives - negatives}")
